# -*- coding: utf-8 -*-
"""LDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fp5moJ5IJfji4T6B48SbP_JJhMOVjcNM
"""

import numpy as np

def lda(X, y, k=None):
    """
    Perform LDA on the given dataset X with labels y and return the top k linear discriminants.
    If k is None, return all the linear discriminants.
    
    Parameters
    ----------
    X : numpy array, shape (n_samples, n_features)
        The dataset to perform LDA on.
    y : numpy array, shape (n_samples,)
        The labels of the samples in the dataset.
    k : int, optional
        The number of top linear discriminants to return.
    
    Returns
    -------
    linear_discriminants : numpy array, shape (n_samples, k)
        The top k linear discriminants of the dataset.
    """
    # Mean-center the data
    X_mean = X - np.mean(X, axis=0)
    
    # Calculate the within-class scatter matrix
    Sw = np.zeros((X.shape[1], X.shape[1]))
    for c in np.unique(y):
        X_c = X_mean[y == c, :]
        Sw += np.dot(X_c.T, X_c)
    
    # Calculate the between-class scatter matrix
    mean_vectors = []
    for c in np.unique(y):
        mean_vectors.append(np.mean(X_mean[y == c, :], axis=0))
    Sb = np.zeros((X.shape[1], X.shape[1]))
    for i, mean_vector in enumerate(mean_vectors):
        n = X_mean[y == i+1, :].shape[0]
        mean_vector = mean_vector.reshape(X.shape[1], 1)
        Sb += n * np.dot(mean_vector, mean_vector.T)
    
    # Calculate the eigenvalues and eigenvectors of the matrix Sw^(-1) * Sb
    eigenvalues, eigenvectors = np.linalg.eig(np.dot(np.linalg.inv(Sw), Sb))
    
    # Sort the eigenvalues and eigenvectors in decreasing order
    idx = np.argsort(-eigenvalues)
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]
    
    # Select the top k eigenvectors
    if k is not None:
        eigenvectors = eigenvectors[:, :k]
    
    # Project the data onto the eigenvectors
    linear_discriminants = np.dot(X_mean, eigenvectors)
    
    return linear_discriminants