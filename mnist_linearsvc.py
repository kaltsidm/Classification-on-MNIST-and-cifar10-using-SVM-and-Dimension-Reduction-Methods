# -*- coding: utf-8 -*-
"""mnist_LinearSVC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sQFunGmVjPKiDVTXnnElnQjMVdqsrHRK
"""

#from sklearn. datasets import load_digits 
from sklearn import metrics
import pandas as pd 
import matplotlib. pyplot as plt 
from keras.datasets import mnist
from sklearn import svm
from sklearn.svm import SVC
from sklearn.svm import LinearSVC
from sklearn import metrics
import keras
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train=X_train.flatten().reshape(60000,784)
X_test=X_test.flatten().reshape(10000,784)
X_train=X_train/255.0
X_test=X_test/255.0

from sklearn.decomposition import PCA
import numpy as np

pca=PCA().fit(X_train)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.grid()
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance')

pca=PCA(n_components=100)
pca.fit(X_train)

X_train=pca.transform(X_train)
X_test=pca.transform(X_test)

import time
start=time.time()
model=svm.LinearSVC()
model.fit(X_train,y_train)
end=time.time()

elapsed_time=end-start 
print(elapsed_time)

y_predicted=model.predict(X_test)
y_predicted_train=model.predict(X_train)

acc_test=metrics.accuracy_score(y_test,y_predicted)
acc_train=metrics.accuracy_score(y_train,y_predicted_train)
print(acc_test)
print(acc_train)

f1=metrics.f1_score(y_test, y_predicted, average="macro")
acc=metrics.accuracy_score(y_test,y_predicted)
rec=metrics.recall_score(y_test,y_predicted, average="macro")
pr=metrics.precision_score(y_test, y_predicted, average="macro")
print(f1)
print(acc)
print(rec)
print(pr)

Fls=[]
for i in range(len(y_test)):
  if y_test[i]!=y_predicted[i]:
    Fls.append(i)
print(len(Fls))



