# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jajF_oLdzeEeddoxA0F4Wue6noUnS4vG
"""

import numpy as np

def pca(X, k=None):
    #"""
    #Perform PCA on the given dataset X and return the top k principal components.
    #If k is None, return all the principal components.
    
    #Parameters
    #----------
    #X : numpy array, shape (n_samples, n_features)
    #    The dataset to perform PCA on.
    #k : int, optional
    #    The number of top principal components to return.
    
    #Returns
    #-------
    #principal_components : numpy array, shape (n_samples, k)
    #    The top k principal components of the dataset.
    #"""
    
    # Mean-center the data
    X_mean = X - np.mean(X, axis=0)
    
    # Calculate the covariance matrix
    cov_matrix = np.cov(X_mean.T)
    
    # Calculate the eigenvalues and eigenvectors of the covariance matrix
    eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)
    
    # Sort the eigenvalues and eigenvectors in decreasing order
    idx = np.argsort(-eigenvalues)
    eigenvalues = eigenvalues[idx]
    eigenvectors = eigenvectors[:, idx]
    
    # Select the top k eigenvectors
    if k is not None:
        eigenvectors = eigenvectors[:, :k]
    
    # Project the data onto the eigenvectors
    principal_components = np.dot(X_mean, eigenvectors)
    
    return principal_components