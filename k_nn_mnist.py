# -*- coding: utf-8 -*-
"""k-NN_mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bNnyOqq4cTlaOs5MHifeSlNiqeodP0Go
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
import pandas as pd 
import matplotlib. pyplot as plt 
from keras.datasets import mnist
import keras
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.neighbors import NearestCentroid

(X_train, y_train), (X_test, y_test) = mnist.load_data()

X_train=X_train.flatten().reshape(60000,784)
X_test=X_test.flatten().reshape(10000,784)
X_train=X_train/255.0
X_test=X_test/255.0

from sklearn.decomposition import PCA
import numpy as np

pca=PCA().fit(X_train)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.grid()
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance')

pca=PCA(n_components=100)
pca.fit(X_train)

X_train=pca.transform(X_train)
X_test=pca.transform(X_test)

import time
start=time.time()
clf= KNeighborsClassifier(n_neighbors=20,p=3)
model=clf.fit(X_train,y_train)
y_predicted=clf.predict(X_test)
y_predicted_train=clf.predict(X_train)
end=time.time()

elapsed_time=end-start 
print(elapsed_time)

import time
start=time.time()
clf= NearestCentroid(metric="")
model=clf.fit(X_train,y_train)
y_predicted=clf.predict(X_test)
y_predicted_train=clf.predict(X_train)
end=time.time()

elapsed_time=end-start 
print(elapsed_time)

acc_test=metrics.accuracy_score(y_test,y_predicted)
acc_train=metrics.accuracy_score(y_train,y_predicted_train)
print(acc_test)
print(acc_train)

f1=metrics.f1_score(y_test, y_predicted, average="macro")
acc=metrics.accuracy_score(y_test,y_predicted)
rec=metrics.recall_score(y_test,y_predicted, average="macro")
pr=metrics.precision_score(y_test, y_predicted, average="macro")
print(f1)
print(acc)
print(rec)
print(pr)

Fls=[]
for i in range(len(y_test)):
  if y_test[i]!=y_predicted[i]:
    Fls.append(i)
print(len(Fls))