# -*- coding: utf-8 -*-
"""cifar_LinearSVC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14a9dVIve8YnxtCE2aC4e_qxfzR_kV6TT
"""

import matplotlib.pyplot as plt
from sklearn import datasets
from sklearn import svm
import pandas as pd
import numpy as np
import tensorflow as tf
import time
from sklearn import metrics
from sklearn.svm import LinearSVC

cifar10=tf.keras.datasets.cifar10

(x_train,y_train),(x_test,y_test)=cifar10.load_data()

x_train, x_test = x_train / 255.0, x_test / 255.0

x_train=x_train.flatten().reshape(50000,3072)
x_test=x_test.flatten().reshape(10000,3072)
#y_train, y_test = y_train.flatten(), y_test.flatten()

from sklearn.decomposition import PCA

pca = PCA().fit(x_train)
plt.plot(np.cumsum(pca.explained_variance_ratio_))
plt.grid()
plt.xlabel('number of components')
plt.ylabel('cumulative explained variance')

pca=PCA(n_components=150)
pca.fit(x_train)
x_train=pca.transform(x_train)
x_test=pca.transform(x_test)

#with svm.SVC
import time
start=time.time()
model=svm.LinearSVC(C=1000)
model.fit(x_train,y_train)
end=time.time()

elapsed_time=end-start
print(elapsed_time)



y_predicted=model.predict(x_test.flatten().reshape(10000,150))
y_predicted_train=model.predict(x_train.flatten().reshape(50000,150))

print(metrics.accuracy_score(y_test,y_predicted))
print(metrics.accuracy_score(y_train,y_predicted_train))

f1=metrics.f1_score(y_test, y_predicted, average="macro")
acc=metrics.accuracy_score(y_test,y_predicted)
rec=metrics.recall_score(y_test,y_predicted, average="macro")
pr=metrics.precision_score(y_test, y_predicted, average="macro")
print(f1)
print(acc)
print(rec)
print(pr)

Fls=[]
for i in range(len(y_test)):
  if y_test[i]!=y_predicted[i]:
    Fls.append(i)
print(len(Fls))



